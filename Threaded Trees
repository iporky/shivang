package cry;

public class threadedTree {

	Node2 root;

	public threadedTree() {

	}

	public threadedTree(Node2 r) {
		this.root = r;
		this.root.right = this.root;
		this.root.is_left = this.root.is_right = true;
	}

	void insertNode(int value) {
		Node2 n = new Node2(value);
		n.is_left = n.is_right = true;
		Node2 temp = root;
		while (true) {
			if (value > temp.val) {
				if (temp.is_right)
					break;
				temp = temp.right;
			}
			if (value < temp.val) {
				
				if (temp.is_left)
					break;
				temp = temp.left;
			}
		}
		if (value < temp.val) {
			temp.left = n;
			n.right = temp;
			temp.is_left = false;
		}
		if (value > temp.val) {
			n.right = temp.right;
			temp.right = n;
			temp.is_right = false;
		}
	}

	public Node2 leftmost(Node2 n) {
		if (n == null)
			return null;

		while (n.left != null)
			n = n.left;

		return n;
	}

	public void display(Node2 r) {
		System.out.print(r.val);
	}

	void inorder(Node2 r) {

		Node2 t = leftmost(r);
		while (true) {
			System.out.println(t.val);
				
			if (t.is_right ) {
				if(t.right==root && t.val>t.right.val)
				{
					break;
				}
				t = t.right;
				
			} else {
				t = leftmost(t.right);

			}
		}

	}

	public static void main(String args[]) {
		Node2 s = new Node2(100);
		threadedTree cry = new threadedTree(s);
		cry.insertNode(30);
		cry.insertNode(4);
		cry.insertNode(7);
		cry.insertNode(8);
		cry.insertNode(3);
		cry.insertNode(6);
		cry.insertNode(111);
		cry.insertNode(101);
		cry.insertNode(112);
		cry.inorder(cry.root);
	}

}

class Node2 {
	int val;
	Node2 left;
	Node2 right;
	Boolean is_right;
	Boolean is_left;

	public Node2(int value) {
		this.val = value;
		left = right = null;

	}
}
